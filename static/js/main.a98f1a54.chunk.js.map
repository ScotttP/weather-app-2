{"version":3,"sources":["mainDisplay.js","App.js","serviceWorker.js","index.js"],"names":["MainDisplay","this","props","weather","city","temp","description","feelsLike","humidity","windDirection","windSpeed","React","Component","App","state","userInput","componentDidMount","bind","handleChange","console","log","fetch","mode","response","json","weatherData","setState","name","main","feels_like","wind","deg","speed","error","event","target","value","preventDefault","className","onSubmit","id","type","placeholder","onChange","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"gTAGqBA,G,6KAGb,OACI,6BACA,qCAAU,gCAASC,KAAKC,MAAMC,QAAQC,OACtC,2CAAgB,gCAASH,KAAKC,MAAMC,QAAQE,OAC5C,2CAAgB,gCAASJ,KAAKC,MAAMC,QAAQG,cAC5C,0CAAe,gCAASL,KAAKC,MAAMC,QAAQI,YAC3C,wCAAa,gCAASN,KAAKC,MAAMC,QAAQK,WACzC,8CAAmB,gCAASP,KAAKC,MAAMC,QAAQM,gBAC/C,0CAAe,gCAASR,KAAKC,MAAMC,QAAQO,iB,GAXdC,IAAMC,YCI1BC,E,kDACnB,WAAYX,GAAO,IAAD,8BAChB,cAAMA,IACDY,MAAQ,CACXC,UAAW,WACXX,KAAM,GACNC,KAAM,GACNC,YAAa,GACbC,UAAW,GACXC,SAAU,GACVC,cAAe,GACfC,UAAW,IAEb,EAAKM,kBAAoB,EAAKA,kBAAkBC,KAAvB,gBACzB,EAAKC,aAAe,EAAKA,aAAaD,KAAlB,gBAbJ,E,kMAmBZE,QAAQC,IAAInB,KAAKa,MAAMC,W,SACAM,MAAM,qDAAD,OAAsDpB,KAAKa,MAAMC,UAAjE,2CAAoH,CAACO,KAAM,S,cAAjJC,E,gBACoBA,EAASC,O,OAA7BC,E,OACNxB,KAAKyB,SAAS,CACZtB,KAAOqB,EAAYE,KACnBtB,KAAMoB,EAAYG,KAAKvB,KACvBC,YAAamB,EAAYtB,QAAQ,GAAGG,YACpCC,UAAWkB,EAAYG,KAAKC,WAC5BrB,SAAUiB,EAAYG,KAAKpB,SAC3BC,cAAegB,EAAYK,KAAKC,IAChCrB,UAAWe,EAAYK,KAAKE,Q,kDAI9Bb,QAAQc,MAAR,M,mJAMQC,GACZjC,KAAKyB,SAAS,CACVX,UAAWmB,EAAMC,OAAOC,QAE5BF,EAAMG,mB,+BAKN,OACE,yBAAKC,UAAU,OACb,6BACM,0BAAMC,SAAUtC,KAAKe,mBACjB,2BAAOwB,GAAI,aAAaC,KAAK,OAAOC,YAAY,gBAAiBC,SAAU1C,KAAKiB,eAChF,2BAAOsB,GAAG,SAASC,KAAK,SAASL,MAAM,aAInD,kBAAC,EAAD,CAAajC,QAASF,KAAKa,a,GA1DAH,IAAMC,WCKnBgC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAA3B,GACLd,QAAQc,MAAMA,EAAM4B,c","file":"static/js/main.a98f1a54.chunk.js","sourcesContent":["import React from 'react'\n\n\nexport default class MainDisplay extends React.Component {\n    render(){\n        \n        return(\n            <div>\n            <h1>City: <strong>{this.props.weather.city}</strong></h1>\n            <p>Temperature: <strong>{this.props.weather.temp}</strong></p>\n            <p>Description: <strong>{this.props.weather.description}</strong></p>\n            <p>Feels Like: <strong>{this.props.weather.feelsLike}</strong></p>\n            <p>Humidity: <strong>{this.props.weather.humidity}</strong></p>\n            <p>Wind Direction: <strong>{this.props.weather.windDirection}</strong></p>\n            <p>Wind Speed: <strong>{this.props.weather.windSpeed}</strong></p>\n             \n            </div>\n        )\n    }\n}","import React from 'react';\nimport './App.css';\n\nimport MainDisplay from './mainDisplay'\n\n\n\nexport default class App extends React.Component{\n  constructor(props){\n    super(props)\n    this.state = {\n      userInput: 'New York',\n      city: '',\n      temp: '',\n      description: '',\n      feelsLike: '',\n      humidity: '',\n      windDirection: '',\n      windSpeed: ''\n    }\n    this.componentDidMount = this.componentDidMount.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n  }\n  \n   async componentDidMount () {\n     \n    try {\n        console.log(this.state.userInput)\n        const response = await fetch(`https://api.openweathermap.org/data/2.5/weather?q=${this.state.userInput}&APPID=b388badf2ea8d6a1b0fc28f7d99e0ccc`,{mode: 'cors'});\n        const weatherData = await response.json();\n        this.setState({\n          city : weatherData.name,\n          temp: weatherData.main.temp,\n          description: weatherData.weather[0].description,\n          feelsLike: weatherData.main.feels_like,\n          humidity: weatherData.main.humidity,\n          windDirection: weatherData.wind.deg,\n          windSpeed: weatherData.wind.speed,\n        })\n        \n    } catch (error){\n        console.error(error) //display an error message\n    }\n  \n    \n  }\n\n  handleChange (event) {\n    this.setState({\n        userInput: event.target.value,\n    })\n    event.preventDefault()\n    \n}\n\n  render() {\n    return (\n      <div className=\"App\">\n        <div>\n              <form onSubmit={this.componentDidMount}>\n                  <input id =\"userSearch\" type=\"text\" placeholder=\"City, Country\"  onChange={this.handleChange}></input>\n                  <input id=\"search\" type=\"submit\" value=\"Search\" />\n              </form>\n              \n        </div>\n      <MainDisplay weather={this.state}/>\n      </div>\n    )\n    \n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}