{"version":3,"sources":["mainDisplay.js","userInput.js","App.js","serviceWorker.js","index.js"],"names":["MainDisplay","props","state","temp","Math","round","speed","wind","floor","id","className","this","weather","city","country","src","icon","alt","description","fahrenheit","humidity","direction","windDirection","mph","windSpeed","React","Component","UserInput","type","placeholder","onChange","change","onClick","click","faSearch","App","handleSubmit","e","preventDefault","getWeatherData","handleChange","setState","userInput","target","value","feelsLike","error","bind","fetch","mode","response","json","weatherData","name","sys","main","feels_like","deg","alert","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"kTAGqBA,G,wDACjB,WAAYC,GAAO,IAAD,8BACd,cAAMA,IACDC,MAAQ,GAFC,E,uDAONC,GACR,OAAOC,KAAKC,MAAsB,GAAfF,EAAO,QAAU,EAAG,M,0BAGtCG,GACD,OAAOF,KAAKC,MAAY,QAANC,EAAc,IAAI,K,gCAG9BC,GAGN,MADU,CAAC,IAAK,MAAO,KAAM,MAAO,IAAK,MAAO,KAAM,MAAO,IAAK,MAAO,KAAM,MAAO,IAAK,MAAO,KAAM,OAD9FH,KAAKI,MAAOD,EAAO,KAAQ,IAEnB,M,+BAIlB,OAEI,yBAAKE,GAAG,oBACJ,yBAAKA,GAAG,WACJ,yBAAKA,GAAG,QACJ,wBAAIC,UAAU,cAAcD,GAAG,YAAYE,KAAKV,MAAMW,QAAQC,KAA9D,KAAsEF,KAAKV,MAAMW,QAAQE,SACzF,yBAAKJ,UAAU,cAAcD,GAAI,cAAcM,IAAG,2CAAwCJ,KAAKV,MAAMW,QAAQI,KAA3D,WAA0EC,IAAKN,KAAKV,MAAMW,QAAQM,YAAc,UAClK,uBAAGT,GAAG,QAAO,gCAAW,oCAAGE,KAAKQ,WAAWR,KAAKV,MAAMW,QAAQT,MAAtC,YACxB,uBAAGM,GAAG,sBAAqB,gCAAUE,KAAKV,MAAMW,QAAQM,eAE5D,yBAAKT,GAAG,WACJ,uBAAGC,UAAU,gBAAgBD,GAAG,aAAhC,eAAwD,gCAAU,oCAAGE,KAAKQ,WAAWR,KAAKV,MAAMW,QAAQT,MAAtC,SAAV,MACxD,uBAAGO,UAAU,gBAAgBD,GAAG,YAAhC,aAAqD,gCAASE,KAAKV,MAAMW,QAAQQ,SAA5B,MACrD,uBAAGV,UAAU,gBAAgBD,GAAG,iBAAhC,mBAAgE,gCAAU,oCAAGE,KAAKU,UAAUV,KAAKV,MAAMW,QAAQU,kBAC/G,uBAAGZ,UAAU,gBAAgBD,GAAG,aAAhC,eAAwD,gCAAU,oCAAGE,KAAKY,IAAIZ,KAAKV,MAAMW,QAAQY,WAA/B,iB,GArCjDC,IAAMC,Y,gBCC1BC,E,uKAGb,OACA,yBAAKlB,GAAG,iBACJ,wBAAIA,GAAG,cAAP,eACA,0BAAMA,GAAG,QACL,2BAAOA,GAAI,aAAamB,KAAK,OAAOC,YAAY,gBAAiBC,SAAUnB,KAAKV,MAAM8B,SACtF,4BAAQtB,GAAG,eAAeuB,QAASrB,KAAKV,MAAMgC,OAAO,kBAAC,IAAD,CAAiBjB,KAAMkB,a,GARrDT,IAAMC,WCKxBS,E,kDACnB,WAAYlC,GAAO,IAAD,8BAChB,cAAMA,IA+CRmC,aAAe,SAACC,GACdA,EAAEC,iBACF,EAAKC,kBAlDW,EAqDlBC,aAAe,SAACH,GACd,EAAKI,SAAS,CACVC,UAAWL,EAAEM,OAAOC,QAExBP,EAAEC,kBAvDF,EAAKpC,MAAQ,CACXwC,UAAW,WACX1B,KAAM,GACNH,KAAM,GACNC,QAAS,KACTX,KAAM,GACNe,YAAa,GACb2B,UAAW,GACXzB,SAAU,GACVE,cAAe,GACfE,UAAW,GACXsB,MAAO,IAIT,EAAKN,aAAe,EAAKA,aAAaO,KAAlB,gBACpB,EAAKX,aAAe,EAAKA,aAAaW,KAAlB,gBAlBJ,E,gEAsBhBpC,KAAK4B,mB,kLAMsBS,MAAM,qDAAD,OAAsDrC,KAAKT,MAAMwC,UAAjE,2CAAoH,CAACO,KAAM,S,cAAjJC,E,gBACoBA,EAASC,O,OAA7BC,E,OACNzC,KAAK8B,SAAS,CACZ5B,KAAOuC,EAAYC,KACnBrC,KAAMoC,EAAYxC,QAAQ,GAAGI,KAC7BF,QAASsC,EAAYE,IAAIxC,QACzBX,KAAOiD,EAAYG,KAAKpD,KACxBe,YAAakC,EAAYxC,QAAQ,GAAGM,YACpC2B,UAAWO,EAAYG,KAAKC,WAC5BpC,SAAUgC,EAAYG,KAAKnC,SAC3BE,cAAe8B,EAAY7C,KAAKkD,IAChCjC,UAAW4B,EAAY7C,KAAKD,MAC5BwC,MAAQ,K,kDAGZY,MAAM,4D,6IAmBHZ,GAEH,OACE,yBAAKpC,UAAU,OACf,kBAAC,EAAD,CAAWuB,MAAOtB,KAAKyB,aAAcL,OAAQpB,KAAK6B,eAClD,kBAAC,EAAD,CAAa5B,QAASD,KAAKT,a,GApEFuB,IAAMC,WCGnBiC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAA7B,GACL8B,QAAQ9B,MAAMA,EAAM+B,c","file":"static/js/main.58cbb8c1.chunk.js","sourcesContent":["import React from 'react'\n\n\nexport default class MainDisplay extends React.Component {\n    constructor(props){\n        super(props)\n        this.state = {\n          \n          \n        }\n    }\n    fahrenheit (temp) {\n        return Math.round((temp - 273.15)*9/5 +32 )\n        \n    }\n    mph (speed){\n        return Math.round(speed*2.23694*10)/10;\n\n    }\n    direction(wind) {\n        var val = Math.floor((wind / 22.5) + 0.5);\n        var arr = [\"N\", \"NNE\", \"NE\", \"ENE\", \"E\", \"ESE\", \"SE\", \"SSE\", \"S\", \"SSW\", \"SW\", \"WSW\", \"W\", \"WNW\", \"NW\", \"NNW\"];\n        return arr[(val % 16)];\n    }\n    render(){\n        \n        return(\n\n            <div id=\"contentContainer\">\n                <div id=\"content\">\n                    <div id=\"main\">\n                        <h1 className=\"mainContent\" id=\"location\">{this.props.weather.city}, {this.props.weather.country}</h1>\n                        <img className=\"mainContent\" id =\"weatherIcon\" src = {`http://openweathermap.org/img/wn/${this.props.weather.icon}@2x.png`} alt={this.props.weather.description + ' Icon'}/>\n                        <p id=\"temp\"><strong >{ <>{this.fahrenheit(this.props.weather.temp)}&deg;F </>}</strong></p>\n                        <p id=\"weatherDescription\"><strong >{this.props.weather.description}</strong></p>\n                    </div>\n                    <div id=\"details\">\n                        <p className=\"detailContent\" id=\"feelsLike\">Feels Like: <strong>{ <>{this.fahrenheit(this.props.weather.temp)}&deg;F</>} </strong></p>\n                        <p className=\"detailContent\" id=\"humidity\">Humidity: <strong>{this.props.weather.humidity}%</strong></p>\n                        <p className=\"detailContent\" id=\"windDirection\">Wind Direction: <strong>{ <>{this.direction(this.props.weather.windDirection)}</> }</strong></p>\n                        <p className=\"detailContent\" id=\"windSpeed\">Wind Speed: <strong>{ <>{this.mph(this.props.weather.windSpeed)} MPH</>}</strong></p>\n                    </div>\n\n                </div>\n            </div>\n        )\n    }\n}","import React from 'react'\t\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faSearch } from '@fortawesome/free-solid-svg-icons'\n\nexport default class UserInput extends React.Component {\n\n    render () {\t\n        return (\n        <div id=\"formContainer\">\n            <h1 id=\"weatherApp\">Weather App</h1>\n            <form id=\"form\">\n                <input id =\"userSearch\" type=\"text\" placeholder=\"City, Country\"  onChange={this.props.change}></input>\n                <button id=\"searchButton\" onClick={this.props.click}><FontAwesomeIcon icon={faSearch} /></button>\n            </form>   \n        </div>\n\n        )\t\n    }\t\n} ","import React from 'react';\nimport './App.css';\n\nimport MainDisplay from './mainDisplay'\nimport UserInput from './userInput'\n\n\n\n\nexport default class App extends React.Component{\n  constructor(props){\n    super(props)\n    this.state = {\n      userInput: 'New York',\n      icon: '',\n      city: '',\n      country: 'US',\n      temp: '',\n      description: '',\n      feelsLike: '',\n      humidity: '',\n      windDirection: '',\n      windSpeed: '',\n      error: ''\n      \n    }\n\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  componentDidMount(){ //calls the function on load\n    this.getWeatherData()\n    \n  }\n\n  async getWeatherData () {\n    try {\n        const response = await fetch(`https://api.openweathermap.org/data/2.5/weather?q=${this.state.userInput}&APPID=b388badf2ea8d6a1b0fc28f7d99e0ccc`,{mode: 'cors'});\n        const weatherData = await response.json();\n        this.setState({\n          city : weatherData.name,\n          icon: weatherData.weather[0].icon,\n          country: weatherData.sys.country,\n          temp : weatherData.main.temp,\n          description: weatherData.weather[0].description,\n          feelsLike: weatherData.main.feels_like,\n          humidity: weatherData.main.humidity,\n          windDirection: weatherData.wind.deg,\n          windSpeed: weatherData.wind.speed,\n          error : ''\n        })  \n    } catch (error){\n      alert('Could Not Find This City. Please enter a (City, Country)')\n\n    }\n  }\n\n  handleSubmit = (e) => {\n    e.preventDefault()\n    this.getWeatherData()\n    \n  }\n  handleChange = (e) => {\n    this.setState({\n        userInput: e.target.value,\n    })\n    e.preventDefault()\n    \n  }\n  \n\n  render(error) {\n    \n      return (\n        <div className=\"App\">\n        <UserInput click={this.handleSubmit} change={this.handleChange} />\n        <MainDisplay weather={this.state}/>\n        \n        </div>\n      )\n    \n    \n    \n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}