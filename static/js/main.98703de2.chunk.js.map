{"version":3,"sources":["keys.env","userInput.js","mainDisplay.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","UserInput","props","state","value","handleChange","bind","event","this","setState","target","preventDefault","onSubmit","handleSubmit","id","type","placeholder","onChange","React","Component","MainDisplay","App","data","getWeatherData","userInput","fetch","KEY","mode","response","json","weatherData","console","log","error","className","weather","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"wGAAAA,EAAOC,QAAU,IAA0B,kC,oPCEtBC,E,kDACjB,WAAYC,GAAO,IAAD,8BACd,cAAMA,IACDC,MAAQ,CACTC,MAAM,IAEV,EAAKC,aAAe,EAAKA,aAAaC,KAAlB,gBALN,E,yDAQJC,GACVC,KAAKC,SAAS,CACVL,MAAOG,EAAMG,OAAON,QAExBG,EAAMI,mB,+BAIC,IAAD,OAEN,OAEI,6BACA,0BAAMC,SAAU,kBAAM,EAAKV,MAAMW,aAAa,EAAKV,MAAMC,SACrD,2BAAOU,GAAI,aAAaC,KAAK,OAAOC,YAAY,gBAAgBZ,MAAOI,KAAKL,MAAMC,MAAOa,SAAUT,KAAKH,eACxG,2BAAOS,GAAG,SAASC,KAAK,SAASX,MAAM,iB,GAxBhBc,IAAMC,WCCxBC,E,uKAGb,OACI,6BACA,qCAEA,2CACA,2CACA,0CACA,wCACA,8CACA,+C,GAZ6BF,IAAMC,WCK1BE,E,kDACnB,WAAYnB,GAAO,IAAD,8BAChB,cAAMA,IACDC,MAAQ,CACXmB,KAAO,IAET,EAAKC,eAAiB,EAAKA,eAAejB,KAApB,gBALN,E,oGAOKkB,G,kGAGMC,MAAM,oDAAD,OAAqDD,EAArD,kBAAwEE,KAAM,CAACC,KAAM,S,cAA3GC,E,gBACoBA,EAASC,O,OAA7BC,E,OACNtB,KAAKC,SAAS,CAACa,KAAOQ,IACtBC,QAAQC,IAAIF,G,kDAEZC,QAAQE,MAAR,M,gJAOJ,OACE,yBAAKC,UAAU,OACf,kBAAC,EAAD,CAAWrB,aAAgBL,KAAKe,iBAChC,kBAAC,EAAD,CAAaY,QAAS3B,KAAKL,MAAMmB,Y,GA1BNJ,IAAMC,WCInBiB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAnB,GACLF,QAAQE,MAAMA,EAAMoB,c","file":"static/js/main.98703de2.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/keys.be623d16.env\";","import React from 'react'\n\nexport default class UserInput extends React.Component {\n    constructor(props){\n        super(props);\n        this.state = {\n            value:'',\n        };\n        this.handleChange = this.handleChange.bind(this);\n    }\n\n    handleChange (event) {\n        this.setState({\n            value: event.target.value,\n        })\n        event.preventDefault()\n        \n    }\n\n    render () {\n        \n        return (\n            \n            <div>\n            <form onSubmit={() => this.props.handleSubmit(this.state.value)}>\n                <input id =\"userSearch\" type=\"text\" placeholder=\"City, Country\" value={this.state.value} onChange={this.handleChange}></input>\n                <input id=\"search\" type=\"submit\" value=\"Search\" />\n            </form>\n            \n            </div>\n\n            \n        )\n    }\n}","import React from 'react'\n\n\nexport default class MainDisplay extends React.Component {\n    render(){\n        \n        return(\n            <div>\n            <h1>City:</h1>\n            \n            <p>Temperature:</p>\n            <p>Description:</p>\n            <p>Feels Like:</p>\n            <p>Humidity:</p>\n            <p>Wind Direction:</p>\n            <p>Wind Speed:</p>\n             \n            </div>\n        )\n    }\n}","import React from 'react';\nimport './App.css';\nimport KEY from './keys.env'\n\nimport UserInput from './userInput'\nimport MainDisplay from './mainDisplay'\n\n\nexport default class App extends React.Component{\n  constructor(props){\n    super(props)\n    this.state = {\n      data : ''\n    }\n    this.getWeatherData = this.getWeatherData.bind(this);\n  }\n   async getWeatherData (userInput) {\n     \n    try {\n        const response = await fetch(`http://api.openweathermap.org/data/2.5/weather?q=${userInput}&APPID=${KEY}`,{mode: 'cors'});\n        const weatherData = await response.json();\n        this.setState({data : weatherData})\n        console.log(weatherData)\n    } catch (error){\n        console.error(error) //display an error message\n    }\n  \n    \n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n      <UserInput handleSubmit = {this.getWeatherData}/>\n      <MainDisplay weather={this.state.data}/>\n      </div>\n    )\n    \n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}